// L_Language Snippet Test Data
//
// File:	l_language_snippet_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Sun Oct 22 04:53:51 EDT 2023
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    // trace [+ bracketed subexpressions]
    // trace [+ operator subexpressions]

int X = Y - C#"0"

av *READ-WRITE* uns8 @bp =@ local[81]
av uns8 @cp = "Hello!"
int i = 0
while i < @cp.upper:
    bp[i] = cp[i]
    next i = i + 1
bp[cp.upper] = 0

int X = 5
ap *READ-WRITE* int @Y    // `=@ local' is implied
Y = X + 2                 // Now Y == 7
Y = Y - 4                 // Now Y == 3
X = X + 1                 // Illegal!  X is co
ap ro int @Z = @Y         // Copies pointer value @Y.
                          // Variable conversion from *READ-WRITE*
                          // to ro is legal.

int X = 5
int Y = X + 2             // Now Y == 7; Y is co
next Y = Y - 4            // Now Y == 3; Y is co
Y = Y + 1                 // Illegal!  Y is co

// Compute sum of 4, 5, and 6.
//
int sum = 0
int i = 4
next sum, next i = while i <= 6:
    next sum = sum + i
    next i = i + 1

// Which is semantically equal to:
//
int sum = 0
int i = 4
next sum, next i:
    next sum = sum + i
    next i = i + 1
next sum, next i:
    next sum = sum + i
    next i = i + 1
next sum, next i:
    next sum = sum + i
    next i = i + 1

// And this is semantically equal to:
//
int sum = 0
int i = 4
while i <= 6:
    next sum = sum + i
    next i = i + 1

type my type:
    uns32
    [31-24]  uns8 op code
    [31]     bool has constant
    [23-0]   int constant
    [23-16]  uns8 src1
    [15-8]   uns8 src2
    [7-0]    uns8 des

function int r = max ( int x, int y ):
    if x < y:
        r = y
    else:
        r = x

int x = ...
int y = ...
int z = max ( x, y )

function N r = ( N v1 ) "+" ( N v2 )
