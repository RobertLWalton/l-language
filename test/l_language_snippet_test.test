*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
=== BRACKETED EXPRESSION: line ##:
int X = Y - C#"0"
^^^^^^^^^^^^^^^^^
    {|int X|} = {|{|Y|} - {|C# {|"0"|}|}|}
=== BRACKETED EXPRESSION: line ##:
av *READ-WRITE* uns8 @bp =@ local[81]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|av *READ-WRITE* uns8 @bp|} =@ {|local [81]|}
=== BRACKETED EXPRESSION: line ##:
av uns8 @cp = "Hello!"
^^^^^^^^^^^^^^^^^^^^^^
    {|av uns8 @cp|} = {|"Hello!"|}
=== BRACKETED EXPRESSION: line ##:
int i = 0
^^^^^^^^^
    {|int i|} = {|0|}
=== BRACKETED EXPRESSION: lines ##-##:
while i < @cp.upper:
^^^^^^^^^^^^^^^^^^^^
    bp[i] = cp[i]
^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|while {|{|i|} < {|@cp.upper|}|}|}:
        {|bp [i]|} = {|cp [i]|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: line ##:
bp[cp.upper] = 0
^^^^^^^^^^^^^^^^
    {|bp [cp.upper]|} = {|0|}
=== BRACKETED EXPRESSION: line ##:
int X = 5
^^^^^^^^^
    {|int X|} = {|5|}
=== BRACKETED EXPRESSION: line ##:
ap *READ-WRITE* int @Y    // `=@ local' is implied
^^^^^^^^^^^^^^^^^^^^^^
    ap *READ-WRITE* int @Y
=== BRACKETED EXPRESSION: line ##:
Y = X + 2                 // Now Y == 7
^^^^^^^^^
    {|Y|} = {|{|X|} + {|2|}|}
=== BRACKETED EXPRESSION: line ##:
Y = Y - 4                 // Now Y == 3
^^^^^^^^^
    {|Y|} = {|{|Y|} - {|4|}|}
=== BRACKETED EXPRESSION: line ##:
X = X + 1                 // Illegal!  X is co
^^^^^^^^^
    {|X|} = {|{|X|} + {|1|}|}
=== BRACKETED EXPRESSION: line ##:
ap ro int @Z = @Y         // Copies pointer value @Y.
^^^^^^^^^^^^^^^^^
    {|ap ro int @Z|} = {|@Y|}
=== BRACKETED EXPRESSION: line ##:
int X = 5
^^^^^^^^^
    {|int X|} = {|5|}
=== BRACKETED EXPRESSION: line ##:
int Y = X + 2             // Now Y == 7; Y is co
^^^^^^^^^^^^^
    {|int Y|} = {|{|X|} + {|2|}|}
=== BRACKETED EXPRESSION: line ##:
next Y = Y - 4            // Now Y == 3; Y is co
^^^^^^^^^^^^^^
    {|next Y|} = {|{|Y|} - {|4|}|}
=== BRACKETED EXPRESSION: line ##:
Y = Y + 1                 // Illegal!  Y is co
^^^^^^^^^
    {|Y|} = {|{|Y|} + {|1|}|}
=== BRACKETED EXPRESSION: line ##:
int sum = 0
^^^^^^^^^^^
    {|int sum|} = {|0|}
=== BRACKETED EXPRESSION: line ##:
int i = 4
^^^^^^^^^
    {|int i|} = {|4|}
=== BRACKETED EXPRESSION: lines ##-##:
next sum, next i = while i <= 6:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    next sum = sum + i
^^^^^^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|{|{|next sum|}, {|next i|}|} = {|while {|{|i|} <= {|6|}|}|}|}:
        {|next sum|} = {|{|sum|} + {|i|}|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: line ##:
int sum = 0
^^^^^^^^^^^
    {|int sum|} = {|0|}
=== BRACKETED EXPRESSION: line ##:
int i = 4
^^^^^^^^^
    {|int i|} = {|4|}
=== BRACKETED EXPRESSION: lines ##-##:
next sum, next i:
^^^^^^^^^^^^^^^^^
    next sum = sum + i
^^^^^^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|{|next sum|}, {|next i|}|}:
        {|next sum|} = {|{|sum|} + {|i|}|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: lines ##-##:
next sum, next i:
^^^^^^^^^^^^^^^^^
    next sum = sum + i
^^^^^^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|{|next sum|}, {|next i|}|}:
        {|next sum|} = {|{|sum|} + {|i|}|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: lines ##-##:
next sum, next i:
^^^^^^^^^^^^^^^^^
    next sum = sum + i
^^^^^^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|{|next sum|}, {|next i|}|}:
        {|next sum|} = {|{|sum|} + {|i|}|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: line ##:
int sum = 0
^^^^^^^^^^^
    {|int sum|} = {|0|}
=== BRACKETED EXPRESSION: line ##:
int i = 4
^^^^^^^^^
    {|int i|} = {|4|}
=== BRACKETED EXPRESSION: lines ##-##:
while i <= 6:
^^^^^^^^^^^^^
    next sum = sum + i
^^^^^^^^^^^^^^^^^^^^^^
    next i = i + 1
^^^^^^^^^^^^^^^^^^
    {|while {|{|i|} <= {|6|}|}|}:
        {|next sum|} = {|{|sum|} + {|i|}|}
        {|next i|} = {|{|i|} + {|1|}|}
=== BRACKETED EXPRESSION: lines ##-##:
type my type:
^^^^^^^^^^^^^
    uns32
^^^^^^^^^
    [31-24]  uns8 op code
^^^^^^^^^^^^^^^^^^^^^^^^^
    [31]     bool has constant
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [23-0]   int constant
^^^^^^^^^^^^^^^^^^^^^^^^^
    [23-16]  uns8 src1
^^^^^^^^^^^^^^^^^^^^^^
    [15-8]   uns8 src2
^^^^^^^^^^^^^^^^^^^^^^
    [7-0]    uns8 des
^^^^^^^^^^^^^^^^^^^^^
    type {|my type|}:
        uns32
        [31-24] uns8 op code
        [31] bool has constant
        [23-0] int constant
        [23-16] uns8 src1
        [15-8] uns8 src2
        [7-0] uns8 des
=== BRACKETED EXPRESSION: lines ##-##:
function int r = max ( int x, int y ):
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    if x < y:
^^^^^^^^^^^^^
        r = y
^^^^^^^^^^^^^
    else:
^^^^^^^^^
        r = x
^^^^^^^^^^^^^
    function {|{|int r|} = {|max ({|int x|}, {|int y|})|}|}:
        if {|{|x|} < {|y|}|}:
            {|r|} = {|y|}
        else:
            {|r|} = {|x|}
=== BRACKETED EXPRESSION: line ##:
int x = ...
^^^^^^^^^^^
    {|int x|} = {|"..."|}
=== BRACKETED EXPRESSION: line ##:
int y = ...
^^^^^^^^^^^
    {|int y|} = {|"..."|}
=== BRACKETED EXPRESSION: line ##:
int z = max ( x, y )
^^^^^^^^^^^^^^^^^^^^
    {|int z|} = {|max ({|x|}, {|y|})|}
=== BRACKETED EXPRESSION: line ##:
function N r = ( N v1 ) "+" ( N v2 )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    function {|{|N r|} = {|(N v1) "+" (N v2)|}|}
